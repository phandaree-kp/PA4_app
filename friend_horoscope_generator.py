import streamlit as st
import openai
import pandas as pd
import json

#sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏™‡πà API Key
user_api_key = st.sidebar.text_input("üîë ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å OpenAI API Key(„ÖÖ¬¥ Àò `)", type="password")

prompt_template = """
‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏î‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏õ‡∏±‡πà‡∏ô ‡∏Ç‡∏≥‡∏Ç‡∏±‡∏ô‡∏™‡∏∏‡∏î ‡πÜ ‡∏Æ‡∏≤‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡πÄ‡∏•‡πá‡∏î 
‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå) ‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡∏™‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏Æ‡∏≤‡πÉ‡∏ô 5 ‡∏´‡∏°‡∏ß‡∏î‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
1. ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
2. ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
3. ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
4. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å
5. ‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†
‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON array ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô:
[
    {"category": "‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô", "prediction": "‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢‡∏ä‡∏°‡πÄ‡∏ä‡∏¢! ( ‚Ä¢ ÃÄœâ‚Ä¢ÃÅ )‚úß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‚ï•‚Ä∏‚ï•"},
    {"category": "‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", "prediction": "‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡πÑ‡∏ß„Éæ(ÔΩ°‚ú™œâ‚ú™ÔΩ°)ÔΩºüí∞ ‡πÅ‡∏ï‡πà‡∏´‡∏°‡∏î‡πÑ‡∏õ‡πÑ‡∏ß‡∏Å‡∏ß‡πà‡∏≤ ‚àò ‚àò ‚àò üí∏( ¬∞„ÉÆ¬∞ ) ?"},
    {"category": "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", "prediction": "‡∏õ‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏™‡πå‡∏¢‡∏±‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ ( T·óúT)üéÆ"},
    {"category": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å", "prediction": "‡∏Ñ‡∏ô‡πÇ‡∏™‡∏î‡∏à‡∏∞‡πÄ‡∏à‡∏≠‡∏Ñ‡∏ô‡∏ñ‡∏π‡∏Å‡πÉ‡∏à (ÔΩ°>\\<) ‡πÅ‡∏ï‡πà‡πÄ‡∏Ç‡∏≤‡∏î‡∏±‡∏ô‡∏°‡∏µ‡πÅ‡∏ü‡∏ô‡πÅ‡∏•‡πâ‡∏ß..."},
    {"category": "‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†", "prediction": "‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‚Äî‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏∑‡∏°‡∏´‡∏¢‡∏¥‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á!üß∫üßº"}
]
‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà JSON array ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
""" 

#‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
st.title("üåüüîÆüî• ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏î‡∏ß‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏±‡πà‡∏ô üî•üîÆüåü")
st.write("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ìüëßüèªüßíüèªüíû (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏Ñ‡∏ô) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏Æ‡∏≤!")

#‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏Ñ‡∏ô)
friends_data = []
for i in range(1, 6):
    st.subheader(f"‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà {i} üèÉüèª‚Äç‚ôÇÔ∏èüí®")
    friend_name = st.text_input(f"‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà {i}", key=f"name_{i}")
    birthday = st.selectbox(f"‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà {i}", 
                            ["‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", 
                             "‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô", "‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô", "‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå"], 
                            key=f"birthday_{i}")
    behavior = st.text_input(f"‡∏ô‡∏¥‡∏™‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà {i}", 
                             placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏≠‡∏ö‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß‡∏ô‡∏±‡∏î ‡∏ï‡∏¥‡∏î‡πÅ‡∏ü‡∏ô ‡∏ï‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏∏‡πâ‡∏°‡∏´‡∏°‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô", key=f"behavior_{i}")
    
    if friend_name and birthday and behavior:
        friends_data.append({
            "name": friend_name,
            "birthday": birthday,
            "behavior": behavior
        })

#‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
if st.button("(‡πë'·µï'‡πë)‚∏ù*üîÆ ‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏á!"):
    if not user_api_key:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Key ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏á‡∏±‡πâ‡∏ü! („ÖÖ ‚Ä¢·∑Ñ ‚ÇÉ‚Ä¢·∑Ö )")
    elif not friends_data:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô‡∏ô‡πâ‡∏≤ (‡πë>ÿÇ‚Ä¢ÃÄ‡πë)")
    else:
        st.info("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏≠‡πâ‡∏¢! ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏ï‡∏£‡∏π‡πâ‡∏î‡πÜ")
        openai.api_key = user_api_key
        
        results = []
        for friend in friends_data:
            name, birthday, behavior = friend["name"], friend["birthday"], friend["behavior"]
            messages = [
                {"role": "system", "content": prompt_template},
                {"role": "user", "content": f"‡∏ä‡∏∑‡πà‡∏≠: {name}, ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: {birthday}, ‡∏ô‡∏¥‡∏™‡∏±‡∏¢: {behavior}"}
            ]
            
            try:
                response = openai.ChatCompletion.create(
                    model = "gpt-4o-mini", #‡∏£‡∏≠‡∏î‡∏π‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ß‡πà‡∏≤‡∏à‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ model ‡∏ï‡∏∏‡∏ß‡πÑ‡∏´‡∏ô ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á response ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢
                    messages = messages
                )
                horoscope_json = response.choices[0].message['content']
                horoscope_list = json.loads(horoscope_json)
                
                for prediction in horoscope_list:
                    results.append({
                        "Name": name,
                        "Birthday": birthday,
                        "Behavior": behavior,
                        "Category": prediction["category"],
                        "Prediction": prediction["prediction"]
                    })
            except Exception as e:
                results.append({
                    "Name": name,
                    "Birthday": birthday,
                    "Behavior": behavior,
                    "Category": "Error",
                    "Prediction": str(e)
                })

        #‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
        df = pd.DataFrame(results)
        
        #‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        st.subheader("üìã ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
        st.dataframe(df)

        #‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label = "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (CSV)",
            data = csv,
            file_name ="friends_horoscope.csv",
            mime ='text/csv'
        )
